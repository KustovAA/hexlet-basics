# This is an autogenerated file for dynamic methods in Language
# Please rerun bundle exec rake rails_rbi:models[Language] to regenerate.

# typed: strong
module Language::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Language::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(Integer)) }
  def current_version_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def current_version_id=(value); end

  sig { returns(T::Boolean) }
  def current_version_id?; end

  sig { returns(T.nilable(String)) }
  def docker_image; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def docker_image=(value); end

  sig { returns(T::Boolean) }
  def docker_image?; end

  sig { returns(T.nilable(String)) }
  def exercise_filename; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def exercise_filename=(value); end

  sig { returns(T::Boolean) }
  def exercise_filename?; end

  sig { returns(T.nilable(String)) }
  def exercise_test_filename; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def exercise_test_filename=(value); end

  sig { returns(T::Boolean) }
  def exercise_test_filename?; end

  sig { returns(T.nilable(String)) }
  def extension; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def extension=(value); end

  sig { returns(T::Boolean) }
  def extension?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def name; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def name=(value); end

  sig { returns(T::Boolean) }
  def name?; end

  sig { returns(T.nilable(String)) }
  def progress; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def progress=(value); end

  sig { returns(T::Boolean) }
  def progress?; end

  sig { returns(String) }
  def slug; end

  sig { params(value: T.any(String, Symbol)).void }
  def slug=(value); end

  sig { returns(T::Boolean) }
  def slug?; end

  sig { returns(T.nilable(String)) }
  def state; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def state=(value); end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(Integer)) }
  def upload_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def upload_id=(value); end

  sig { returns(T::Boolean) }
  def upload_id?; end
end

module Language::GeneratedAssociationMethods
  sig { returns(::Language::Lesson::Version::Info::ActiveRecord_Associations_CollectionProxy) }
  def current_lesson_infos; end

  sig { returns(T::Array[Integer]) }
  def current_lesson_info_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson::Version::Info]).void }
  def current_lesson_infos=(value); end

  sig { returns(::Language::Lesson::Version::ActiveRecord_Associations_CollectionProxy) }
  def current_lesson_versions; end

  sig { returns(T::Array[Integer]) }
  def current_lesson_version_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson::Version]).void }
  def current_lesson_versions=(value); end

  sig { returns(::Language::Lesson::ActiveRecord_Associations_CollectionProxy) }
  def current_lessons; end

  sig { returns(T::Array[Integer]) }
  def current_lesson_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson]).void }
  def current_lessons=(value); end

  sig { returns(::Language::Module::Version::Info::ActiveRecord_Associations_CollectionProxy) }
  def current_module_infos; end

  sig { returns(T::Array[Integer]) }
  def current_module_info_ids; end

  sig { params(value: T::Enumerable[::Language::Module::Version::Info]).void }
  def current_module_infos=(value); end

  sig { returns(::Language::Module::Version::ActiveRecord_Associations_CollectionProxy) }
  def current_module_versions; end

  sig { returns(T::Array[Integer]) }
  def current_module_version_ids; end

  sig { params(value: T::Enumerable[::Language::Module::Version]).void }
  def current_module_versions=(value); end

  sig { returns(T.nilable(::Language::Version)) }
  def current_version; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language::Version).void)).returns(::Language::Version) }
  def build_current_version(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language::Version).void)).returns(::Language::Version) }
  def create_current_version(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language::Version).void)).returns(::Language::Version) }
  def create_current_version!(*args, &block); end

  sig { params(value: T.nilable(::Language::Version)).void }
  def current_version=(value); end

  sig { returns(::Language::Lesson::ActiveRecord_Associations_CollectionProxy) }
  def lessons; end

  sig { returns(T::Array[Integer]) }
  def lesson_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson]).void }
  def lessons=(value); end

  sig { returns(::Language::Member::ActiveRecord_Associations_CollectionProxy) }
  def members; end

  sig { returns(T::Array[Integer]) }
  def member_ids; end

  sig { params(value: T::Enumerable[::Language::Member]).void }
  def members=(value); end

  sig { returns(::Language::Module::ActiveRecord_Associations_CollectionProxy) }
  def modules; end

  sig { returns(T::Array[Integer]) }
  def module_ids; end

  sig { params(value: T::Enumerable[::Language::Module]).void }
  def modules=(value); end

  sig { returns(::Language::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[Integer]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::Language::Version]).void }
  def versions=(value); end
end

module Language::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Language]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Language]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Language]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Language)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Language) }
  def find_by_id!(id); end
end

class Language < ApplicationRecord
  include Language::GeneratedAttributeMethods
  include Language::GeneratedAssociationMethods
  extend Language::CustomFinderMethods
  extend Language::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Language::ActiveRecord_Relation, Language::ActiveRecord_Associations_CollectionProxy, Language::ActiveRecord_AssociationRelation) }
end

module Language::QueryMethodsReturningRelation
  sig { returns(Language::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Language::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Language::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Language::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Language::QueryMethodsReturningAssociationRelation
  sig { returns(Language::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Language::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Language::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Language::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Language::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class Language::ActiveRecord_Relation < ActiveRecord::Relation
  include Language::ActiveRelation_WhereNot
  include Language::CustomFinderMethods
  include Language::QueryMethodsReturningRelation
  Elem = type_member(fixed: Language)
end

class Language::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Language::ActiveRelation_WhereNot
  include Language::CustomFinderMethods
  include Language::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Language)
end

class Language::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Language::CustomFinderMethods
  include Language::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Language)

  sig { params(records: T.any(Language, T::Array[Language])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Language, T::Array[Language])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Language, T::Array[Language])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Language, T::Array[Language])).returns(T.self_type) }
  def concat(*records); end
end
