# This is an autogenerated file for dynamic methods in Language::Lesson
# Please rerun bundle exec rake rails_rbi:models[Language::Lesson] to regenerate.

# typed: strong
module Language::Lesson::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module Language::Lesson::GeneratedAttributeMethods
  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(Integer)) }
  def language_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def language_id=(value); end

  sig { returns(T::Boolean) }
  def language_id?; end

  sig { returns(T.nilable(Integer)) }
  def module_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def module_id=(value); end

  sig { returns(T::Boolean) }
  def module_id?; end

  sig { returns(T.nilable(Integer)) }
  def natural_order; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def natural_order=(value); end

  sig { returns(T::Boolean) }
  def natural_order?; end

  sig { returns(T.nilable(Integer)) }
  def order; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def order=(value); end

  sig { returns(T::Boolean) }
  def order?; end

  sig { returns(T.nilable(String)) }
  def original_code; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def original_code=(value); end

  sig { returns(T::Boolean) }
  def original_code?; end

  sig { returns(T.nilable(String)) }
  def path_to_code; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def path_to_code=(value); end

  sig { returns(T::Boolean) }
  def path_to_code?; end

  sig { returns(T.nilable(String)) }
  def prepared_code; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def prepared_code=(value); end

  sig { returns(T::Boolean) }
  def prepared_code?; end

  sig { returns(String) }
  def slug; end

  sig { params(value: T.any(String, Symbol)).void }
  def slug=(value); end

  sig { returns(T::Boolean) }
  def slug?; end

  sig { returns(T.nilable(String)) }
  def state; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def state=(value); end

  sig { returns(T::Boolean) }
  def state?; end

  sig { returns(T.nilable(String)) }
  def test_code; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def test_code=(value); end

  sig { returns(T::Boolean) }
  def test_code?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end

  sig { returns(T.nilable(Integer)) }
  def upload_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def upload_id=(value); end

  sig { returns(T::Boolean) }
  def upload_id?; end
end

module Language::Lesson::GeneratedAssociationMethods
  sig { returns(::Language::Lesson::Version::Info::ActiveRecord_Associations_CollectionProxy) }
  def infos; end

  sig { returns(T::Array[Integer]) }
  def info_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson::Version::Info]).void }
  def infos=(value); end

  sig { returns(::Language) }
  def language; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language).void)).returns(::Language) }
  def build_language(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language).void)).returns(::Language) }
  def create_language(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language).void)).returns(::Language) }
  def create_language!(*args, &block); end

  sig { params(value: ::Language).void }
  def language=(value); end

  sig { returns(::Language::Lesson::Member::ActiveRecord_Associations_CollectionProxy) }
  def members; end

  sig { returns(T::Array[Integer]) }
  def member_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson::Member]).void }
  def members=(value); end

  sig { returns(::Language::Module) }
  def module; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language::Module).void)).returns(::Language::Module) }
  def build_module(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language::Module).void)).returns(::Language::Module) }
  def create_module(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Language::Module).void)).returns(::Language::Module) }
  def create_module!(*args, &block); end

  sig { params(value: ::Language::Module).void }
  def module=(value); end

  sig { returns(::Language::Lesson::Version::ActiveRecord_Associations_CollectionProxy) }
  def versions; end

  sig { returns(T::Array[Integer]) }
  def version_ids; end

  sig { params(value: T::Enumerable[::Language::Lesson::Version]).void }
  def versions=(value); end
end

module Language::Lesson::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[Language::Lesson]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[Language::Lesson]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[Language::Lesson]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(Language::Lesson)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(Language::Lesson) }
  def find_by_id!(id); end
end

class Language::Lesson < ApplicationRecord
  include Language::Lesson::GeneratedAttributeMethods
  include Language::Lesson::GeneratedAssociationMethods
  extend Language::Lesson::CustomFinderMethods
  extend Language::Lesson::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(Language::Lesson::ActiveRecord_Relation, Language::Lesson::ActiveRecord_Associations_CollectionProxy, Language::Lesson::ActiveRecord_AssociationRelation) }

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def self.active(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def self.archived(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def self.created(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def self.left_join_lesson_member_and_user(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def self.ordered(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def self.web(*args); end
end

class Language::Lesson::ActiveRecord_Relation < ActiveRecord::Relation
  include Language::Lesson::ActiveRelation_WhereNot
  include Language::Lesson::CustomFinderMethods
  include Language::Lesson::QueryMethodsReturningRelation
  Elem = type_member(fixed: Language::Lesson)

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def archived(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def created(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def left_join_lesson_member_and_user(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def ordered(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def web(*args); end
end

class Language::Lesson::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include Language::Lesson::ActiveRelation_WhereNot
  include Language::Lesson::CustomFinderMethods
  include Language::Lesson::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Language::Lesson)

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def archived(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def created(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def left_join_lesson_member_and_user(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def ordered(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def web(*args); end
end

class Language::Lesson::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Language::Lesson::CustomFinderMethods
  include Language::Lesson::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: Language::Lesson)

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def active(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def archived(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def created(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def left_join_lesson_member_and_user(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def ordered(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def web(*args); end

  sig { params(records: T.any(Language::Lesson, T::Array[Language::Lesson])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(Language::Lesson, T::Array[Language::Lesson])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(Language::Lesson, T::Array[Language::Lesson])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(Language::Lesson, T::Array[Language::Lesson])).returns(T.self_type) }
  def concat(*records); end
end

module Language::Lesson::QueryMethodsReturningRelation
  sig { returns(Language::Lesson::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Language::Lesson::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_Relation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Language::Lesson::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Language::Lesson::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module Language::Lesson::QueryMethodsReturningAssociationRelation
  sig { returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(Language::Lesson::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def reselect(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def extract_associated(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def optimizer_hints(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def only(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Language::Lesson::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: Language::Lesson::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end
